const fs = require("fs");
const path = __dirname + "/cache/money.json";
const counterPath = __dirname + "/cache/messageCounter.json";
const dailyPath = __dirname + "/cache/daily.json";

// ------------------
// ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶≤‡ßã‡¶°/‡¶∏‡ßá‡¶≠
function loadMoney() {
    if (!fs.existsSync(path)) return {};
    return JSON.parse(fs.readFileSync(path));
}
function saveMoney(data) {
    fs.writeFileSync(path, JSON.stringify(data, null, 2));
}

// ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü‡¶æ‡¶∞ ‡¶≤‡ßã‡¶°/‡¶∏‡ßá‡¶≠
function loadCounter() {
    if (!fs.existsSync(counterPath)) return {};
    return JSON.parse(fs.readFileSync(counterPath));
}
function saveCounter(data) {
    fs.writeFileSync(counterPath, JSON.stringify(data, null, 2));
}

// ‡¶°‡ßá‡¶á‡¶≤‡¶ø ‡¶≤‡ßã‡¶°/‡¶∏‡ßá‡¶≠
function loadDaily() {
    if (!fs.existsSync(dailyPath)) return {};
    return JSON.parse(fs.readFileSync(dailyPath));
}
function saveDaily(data) {
    fs.writeFileSync(dailyPath, JSON.stringify(data, null, 2));
}

// ------------------
module.exports.config = {
    name: "moneychat",
    version: "1.3.0",
    hasPermssion: 0,
    credits: "Mohammad Akash (Edited by ChatGPT)",
    description: "Earn money by chatting, bet, daily reward, dice, lottery",
    commandCategory: "fun",
    usages: "/money | /bet [amount] | /daily | /dice [amount] | /lottery [amount]",
    cooldowns: 3
};

let userBalance = loadMoney();
let messageCounter = loadCounter();
let dailyData = loadDaily();

const MESSAGE_REWARD = 5;
const NOTICE_THRESHOLD = 20;
const MULTIPLIERS = [2, 10, 20]; // bet
const DICE_MULTIPLIERS = [2, 3, 4, 5]; // dice
const DAILY_MIN = 100;
const DAILY_MAX = 500;

module.exports.run = async function ({ api, event, args }) {
    const { threadID, senderID } = event;
    if (!userBalance[senderID]) userBalance[senderID] = 1000;
    if (!dailyData[senderID]) dailyData[senderID] = 0;

    const command = args[0] ? args[0].toLowerCase() : "check";

    // -------------------
    // /money ‡¶¨‡¶æ check
    if (command === "check" || command === "money") {
        return api.sendMessage(
            `üí∞ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶ü‡¶æ‡¶ï‡¶æ: ${userBalance[senderID]} ‡ß≥`,
            threadID
        );
    }

    // -------------------
    // /daily
    if (command === "daily") {
        const today = new Date().toDateString();
        if (dailyData[senderID] === today) {
            return api.sendMessage("‚è∞ ‡¶Ü‡¶™‡¶®‡¶ø ‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶°‡ßá‡¶á‡¶≤‡¶ø ‡¶∞‡¶ø‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶™‡ßá‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡¶®, ‡¶ï‡¶æ‡¶≤ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®!", threadID);
        }

        const amount = Math.floor(Math.random() * (DAILY_MAX - DAILY_MIN + 1)) + DAILY_MIN;
        userBalance[senderID] += amount;
        dailyData[senderID] = today;

        saveMoney(userBalance);
        saveDaily(dailyData);

        return api.sendMessage(`üéÅ Daily Reward: ‡¶Ü‡¶™‡¶®‡¶ø ${amount} ‡ß≥ ‡¶™‡ßá‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡¶®! üí∞ ‡¶®‡¶§‡ßÅ‡¶® ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡¶æ‡¶®‡ßç‡¶∏: ${userBalance[senderID]} ‡ß≥`, threadID);
    }

    // -------------------
    return api.sendMessage(
        "‚ÑπÔ∏è ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®:\n/money ‚Üí ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®\n/bet [amount] ‚Üí Bet ‡¶ï‡¶∞‡ßÅ‡¶®\n/daily ‚Üí Daily Reward\n/dice [amount] ‚Üí Dice Game\n/lottery [amount] ‚Üí Lottery",
        threadID
    );
};

// -------------------
// ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶á‡¶≠‡ßá‡¶®‡ßç‡¶ü
module.exports.handleEvent = async function ({ api, event }) {
    const { senderID, threadID, body } = event;
    if (!body) return;

    if (!userBalance[senderID]) userBalance[senderID] = 1000;
    if (!messageCounter[senderID]) messageCounter[senderID] = 0;

    const args = body.trim().split(" ");

    // -------------------
    // /bet
    if (args[0].toLowerCase() === "/bet") {
        const betAmount = parseInt(args[1]);
        if (!betAmount || isNaN(betAmount) || betAmount <= 0) return api.sendMessage("‚ö†Ô∏è ‡¶∏‡¶†‡¶ø‡¶ï‡¶≠‡¶æ‡¶¨‡ßá ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®, ‡¶Ø‡ßá‡¶Æ‡¶®: /bet 200", threadID);
        if (userBalance[senderID] < betAmount) return api.sendMessage("‚ùå ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶õ‡ßá ‡¶è‡¶§ ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶®‡ßá‡¶á!", threadID);

        const chosenMultiplier = MULTIPLIERS[Math.floor(Math.random() * MULTIPLIERS.length)];
        const win = Math.random() < 0.5;
        let resultMessage = "";

        if (win) {
            const winAmount = betAmount * chosenMultiplier;
            userBalance[senderID] += winAmount;
            resultMessage = `
üé∞ ùóñùóîùó¶ùóúùó°ùó¢ ùóïùóòùóß üé∞
üíµ Bet: ${betAmount} ‡ß≥
‚ú® Multiplier: ${chosenMultiplier}x
üèÜ You Won: ${winAmount} ‡ß≥
üí∞ ‡¶®‡¶§‡ßÅ‡¶® ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡¶æ‡¶®‡ßç‡¶∏: ${userBalance[senderID]} ‡ß≥
            `;
        } else {
            userBalance[senderID] -= betAmount;
            resultMessage = `
üé∞ ùóñùóîùó¶ùóúùó°ùó¢ ùóïùóòùóß üé∞
üíµ Bet: ${betAmount} ‡ß≥
‚ö†Ô∏è Multiplier: ${chosenMultiplier}x
‚ùå You Lost: ${betAmount} ‡ß≥
üí∞ ‡¶®‡¶§‡ßÅ‡¶® ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡¶æ‡¶®‡ßç‡¶∏: ${userBalance[senderID]} ‡ß≥
            `;
        }

        saveMoney(userBalance);
        return api.sendMessage(resultMessage, threadID);
    }

    // -------------------
    // /dice
    if (args[0].toLowerCase() === "/dice") {
        const diceBet = parseInt(args[1]);
        if (!diceBet || isNaN(diceBet) || diceBet <= 0) return api.sendMessage("‚ö†Ô∏è ‡¶∏‡¶†‡¶ø‡¶ï‡¶≠‡¶æ‡¶¨‡ßá ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®, ‡¶Ø‡ßá‡¶Æ‡¶®: /dice 100", threadID);
        if (userBalance[senderID] < diceBet) return api.sendMessage("‚ùå ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶õ‡ßá ‡¶è‡¶§ ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶®‡ßá‡¶á!", threadID);

        const diceRoll = Math.floor(Math.random() * 6) + 1;
        const multiplier = DICE_MULTIPLIERS[Math.floor(Math.random() * DICE_MULTIPLIERS.length)];
        const win = diceRoll > 3; // ‡ß™,‡ß´,‡ß¨ ‡¶π‡¶≤‡ßá ‡¶ú‡¶ø‡¶§‡¶¨‡ßá

        let diceMessage = `
üé≤ Dice Roll: ${diceRoll}
üíµ Bet: ${diceBet} ‡ß≥
Multiplier: ${multiplier}x
`;

        if (win) {
            const winAmount = diceBet * multiplier;
            userBalance[senderID] += winAmount;
            diceMessage += `üèÜ You Won: ${winAmount} ‡ß≥\nüí∞ ‡¶®‡¶§‡ßÅ‡¶® ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡¶æ‡¶®‡ßç‡¶∏: ${userBalance[senderID]} ‡ß≥`;
        } else {
            userBalance[senderID] -= diceBet;
            diceMessage += `‚ùå You Lost: ${diceBet} ‡ß≥\nüí∞ ‡¶®‡¶§‡ßÅ‡¶® ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡¶æ‡¶®‡ßç‡¶∏: ${userBalance[senderID]} ‡ß≥`;
        }

        saveMoney(userBalance);
        return api.sendMessage(diceMessage, threadID);
    }

    // -------------------
    // /lottery
    if (args[0].toLowerCase() === "/lottery") {
        const lotteryBet = parseInt(args[1]);
        if (!lotteryBet || isNaN(lotteryBet) || lotteryBet <= 0) return api.sendMessage("‚ö†Ô∏è ‡¶∏‡¶†‡¶ø‡¶ï‡¶≠‡¶æ‡¶¨‡ßá ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®, ‡¶Ø‡ßá‡¶Æ‡¶®: /lottery 100", threadID);
        if (userBalance[senderID] < lotteryBet) return api.sendMessage("‚ùå ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶õ‡ßá ‡¶è‡¶§ ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶®‡ßá‡¶á!", threadID);

        const win = Math.random() < 0.2; // ‡ß®‡ß¶% ‡¶∏‡ßÅ‡¶Ø‡ßã‡¶ó ‡¶ú‡ßá‡¶§‡¶æ‡¶∞
        if (win) {
            const winAmount = lotteryBet * 10;
            userBalance[senderID] += winAmount;
            saveMoney(userBalance);
            return api.sendMessage(`üéüÔ∏è Lottery Result: üéâ You Won ${winAmount} ‡ß≥! üí∞ ‡¶®‡¶§‡ßÅ‡¶® ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡¶æ‡¶®‡ßç‡¶∏: ${userBalance[senderID]} ‡ß≥`, threadID);
        } else {
            userBalance[senderID] -= lotteryBet;
            saveMoney(userBalance);
            return api.sendMessage(`üéüÔ∏è Lottery Result: ‚ùå You Lost ${lotteryBet} ‡ß≥\nüí∞ ‡¶®‡¶§‡ßÅ‡¶® ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡¶æ‡¶®‡ßç‡¶∏: ${userBalance[senderID]} ‡ß≥`, threadID);
        }
    }

    // -------------------
    // ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú‡ßá ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°
    userBalance[senderID] += MESSAGE_REWARD;
    messageCounter[senderID] += 1;
    saveMoney(userBalance);
    saveCounter(messageCounter);

    if (messageCounter[senderID] >= NOTICE_THRESHOLD) {
        api.sendMessage(
            `üí∞ @${senderID} ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶è‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü‡ßá ${MESSAGE_REWARD * NOTICE_THRESHOLD} ‡ß≥ ‡¶ú‡¶Æ‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá!\nüí∞ ‡¶Æ‡ßã‡¶ü ‡¶ü‡¶æ‡¶ï‡¶æ: ${userBalance[senderID]} ‡ß≥`,
            threadID,
            () => {},
            { mentions: [{ tag: "User", id: senderID }] }
        );
        messageCounter[senderID] = 0;
        saveCounter(messageCounter);
    }
};
