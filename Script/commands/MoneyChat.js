const fs = require("fs");
const path = __dirname + "/cache/money.json";

// ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶≤‡ßã‡¶° ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
function loadMoney() {
    if (!fs.existsSync(path)) return {};
    return JSON.parse(fs.readFileSync(path));
}

// ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶∏‡ßá‡¶≠ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
function saveMoney(data) {
    fs.writeFileSync(path, JSON.stringify(data, null, 2));
}

// ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü‡¶æ‡¶∞ ‡¶≤‡ßã‡¶°
const counterPath = __dirname + "/cache/messageCounter.json";
function loadCounter() {
    if (!fs.existsSync(counterPath)) return {};
    return JSON.parse(fs.readFileSync(counterPath));
}
function saveCounter(data) {
    fs.writeFileSync(counterPath, JSON.stringify(data, null, 2));
}

module.exports.config = {
    name: "moneychat",
    version: "1.0.0",
    hasPermssion: 0,
    credits: "CYBER ‚ò¢Ô∏è BOT TEAM (Modified by ChatGPT)",
    description: "Earn money by chatting and bet system",
    commandCategory: "fun",
    usages: "/money | /bet [amount]",
    cooldowns: 3
};

let userBalance = loadMoney();       // ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡ßá‡¶∞ ‡¶ü‡¶æ‡¶ï‡¶æ
let messageCounter = loadCounter();  // ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡ßá‡¶∞ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü‡¶æ‡¶∞

const MESSAGE_REWARD = 5;       // ‡¶™‡ßç‡¶∞‡¶§‡¶ø ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú‡ßá ‡¶ü‡¶æ‡¶ï‡¶æ
const NOTICE_THRESHOLD = 20;    // ‡¶™‡ßç‡¶∞‡¶§‡¶ø ‡ß®‡ß¶ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú‡ßá ‡¶®‡ßã‡¶ü‡¶ø‡¶∂

module.exports.run = async function ({ api, event, args }) {
    const { threadID, senderID } = event;

    if (!userBalance[senderID]) userBalance[senderID] = 1000;
    if (!messageCounter[senderID]) messageCounter[senderID] = 0;

    const command = args[0] ? args[0].toLowerCase() : "check";

    // /money
    if (command === "check" || command === "money") {
        return api.sendMessage(
            `üí∞ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶ü‡¶æ‡¶ï‡¶æ: ${userBalance[senderID]} ‡ß≥`,
            threadID
        );
    }

    return api.sendMessage(
        "‚ÑπÔ∏è ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®:\n/money ‚Üí ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®\n/bet [amount] ‚Üí Bet ‡¶ï‡¶∞‡ßÅ‡¶®",
        threadID
    );
};

// ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú‡ßá ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° + ‡¶®‡ßã‡¶ü‡¶ø‡¶∂ + ‡¶¨‡ßá‡¶ü
module.exports.handleEvent = async function ({ api, event }) {
    const { senderID, threadID, body } = event;
    if (!body) return;

    if (!userBalance[senderID]) userBalance[senderID] = 1000;
    if (!messageCounter[senderID]) messageCounter[senderID] = 0;

    // -------------------
    // /bet command
    const args = body.trim().split(" ");
    if (args[0].toLowerCase() === "/bet") {
        const betAmount = parseInt(args[1]);
        if (!betAmount || isNaN(betAmount) || betAmount <= 0) {
            return api.sendMessage("‚ö†Ô∏è ‡¶∏‡¶†‡¶ø‡¶ï‡¶≠‡¶æ‡¶¨‡ßá ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®, ‡¶Ø‡ßá‡¶Æ‡¶®: /bet 200", threadID);
        }

        if (userBalance[senderID] < betAmount) {
            return api.sendMessage("‚ùå ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶õ‡ßá ‡¶è‡¶§ ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶®‡ßá‡¶á!", threadID);
        }

        const win = Math.random() < 0.5;
        if (win) {
            userBalance[senderID] += betAmount;
            saveMoney(userBalance);
            return api.sendMessage(
                `‚úÖ ‡¶Ü‡¶™‡¶®‡¶ø ‡¶ú‡¶ø‡¶§‡ßá‡¶õ‡ßá‡¶®! üéâ\nüí∞ ‡¶®‡¶§‡ßÅ‡¶® ‡¶ü‡¶æ‡¶ï‡¶æ: ${userBalance[senderID]} ‡ß≥`,
                threadID
            );
        } else {
            userBalance[senderID] -= betAmount;
            saveMoney(userBalance);
            return api.sendMessage(
                `‚ùå ‡¶Ü‡¶™‡¶®‡¶ø ‡¶π‡ßá‡¶∞‡ßá ‡¶ó‡ßá‡¶õ‡ßá‡¶®! üò¢\nüí∞ ‡¶®‡¶§‡ßÅ‡¶® ‡¶ü‡¶æ‡¶ï‡¶æ: ${userBalance[senderID]} ‡ß≥`,
                threadID
            );
        }
    }

    // -------------------
    // ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú‡ßá ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°
    userBalance[senderID] += MESSAGE_REWARD;
    messageCounter[senderID] += 1;

    saveMoney(userBalance);
    saveCounter(messageCounter);

    // ‡¶®‡ßã‡¶ü‡¶ø‡¶∂, ‡¶™‡ßç‡¶∞‡¶§‡¶ø ‡ß®‡ß¶ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú‡ßá
    if (messageCounter[senderID] >= NOTICE_THRESHOLD) {
        api.sendMessage(
            `üí∞ @${senderID} ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶è‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü‡ßá ${MESSAGE_REWARD * NOTICE_THRESHOLD} ‡ß≥ ‡¶ú‡¶Æ‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá!\nüí∞ ‡¶Æ‡ßã‡¶ü ‡¶ü‡¶æ‡¶ï‡¶æ: ${userBalance[senderID]} ‡ß≥`,
            threadID,
            () => {},
            { mentions: [{ tag: "User", id: senderID }] }
        );
        messageCounter[senderID] = 0; // ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü
        saveCounter(messageCounter);
    }
};
