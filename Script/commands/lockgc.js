// lockgc.js
// ржЧрзНрж░рзБржк рж▓ржХ/ржЖржирж▓ржХ рж╕рж┐рж╕рзНржЯрзЗржо (ржлрж▓рзЗ ржмрзНржпрж╛ржХржЖржк рж╕рж╣)

module.exports.config = {
  name: "lockgc",
  version: "1.1.0",
  credits: "Akash",
  description: "Lock & Unlock Group messages with backup alert system"
};

let lockStatus = {}; // group-wise рж▓ржХ рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕

module.exports.run = async function({ api, event, args }) {
  const threadID = event.threadID;
  const senderID = event.senderID;

  // ржЧрзНрж░рзБржк ржЗржиржлрзЛ
  const threadInfo = await api.getThreadInfo(threadID);
  const isAdmin = threadInfo.adminIDs.some(e => e.id == senderID);

  if (!isAdmin) {
    return api.sendMessage("тЭМ ржПржЗ ржХржорж╛ржирзНржб рж╢рзБржзрзБ ржЕрзНржпрж╛ржбржорж┐ржи ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗ!", threadID, event.messageID);
  }

  const command = args[0]?.toLowerCase();

  if (command === "lockgc") {
    lockStatus[threadID] = true;
    return api.sendMessage("ЁЯФТ ржЧрзНрж░рзБржк рж▓ржХ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ тАФ рж╢рзБржзрзБ ржЕрзНржпрж╛ржбржорж┐ржирж░рж╛ рж▓рж┐ржЦрждрзЗ ржкрж╛рж░ржмрзЗред", threadID);
  }

  if (command === "unlockgc") {
    lockStatus[threadID] = false;
    return api.sendMessage("ЁЯФУ ржЧрзНрж░рзБржк ржЖржирж▓ржХ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ тАФ рж╕ржмрж╛ржЗ рж▓рж┐ржЦрждрзЗ ржкрж╛рж░ржмрзЗред", threadID);
  }

  if (command === "statusgc") {
    const status = lockStatus[threadID] ? "ЁЯФТ рж▓ржХ ржХрж░рж╛ ржЖржЫрзЗ" : "ЁЯФУ ржЖржирж▓ржХ ржХрж░рж╛ ржЖржЫрзЗ";
    return api.sendMessage(`ЁЯУМ ржЧрзНрж░рзБржкрзЗрж░ рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕: ${status}`, threadID);
  }

  const help = `ЁЯЫая╕П ржЧрзНрж░рзБржк рж▓ржХ ржХржорж╛ржирзНржб:\nтАв /lockgc lockgc тАФ ржЧрзНрж░рзБржк рж▓ржХ ржХрж░ржмрзЗ\nтАв /lockgc unlockgc тАФ ржЧрзНрж░рзБржк ржЖржирж▓ржХ ржХрж░ржмрзЗ\nтАв /lockgc statusgc тАФ рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕ ржжрзЗржЦрж╛ржмрзЗ`;
  return api.sendMessage(help, threadID);
};

// ржиржи-ржЕрзНржпрж╛ржбржорж┐ржи ржорзЗрж╕рзЗржЬ ржмрзНрж▓ржХ / рж╕рждрж░рзНржХржмрж╛рж░рзНрждрж╛
module.exports.handleEvent = async function({ api, event }) {
  const threadID = event.threadID;
  const senderID = event.senderID;

  if (!lockStatus[threadID]) return;

  try {
    const threadInfo = await api.getThreadInfo(threadID);
    const isAdmin = threadInfo.adminIDs.some(e => e.id == senderID);

    if (!isAdmin) {
      // ржмржЯ ржпржжрж┐ ржЕрзНржпрж╛ржбржорж┐ржи рж╣ржпрж╝, ржорзЗрж╕рзЗржЬ ржбрж┐рж▓рж┐ржЯ ржХрж░ржмрзЗ
      if (threadInfo.adminIDs.some(e => e.id == api.getCurrentUserID())) {
        try { await api.unsendMessage(event.messageID); } catch(e) {}
      } else {
        // ржмржЯ ржЕрзНржпрж╛ржбржорж┐ржи ржирж╛ рж╣рж▓рзЗ рж╕рждрж░рзНржХржмрж╛рж░рзНрждрж╛ ржкрж╛ржарж╛ржмрзЗ
        return api.sendMessage("ЁЯЪл ржЧрзНрж░рзБржк рж▓ржХ ржЖржЫрзЗ тАФ ржЖржкржирж┐ рж▓рж┐ржЦрждрзЗ ржкрж╛рж░ржмрзЗржи ржирж╛!", threadID);
      }
    }
  } catch (e) {
    console.error("lockgc handleEvent error:", e);
  }
};
