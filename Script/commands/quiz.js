module.exports.config = {
    name: "quiz",
    version: "3.0.0",
    hasPermssion: 0,
    credits: "CYBER тШвя╕П BOT TEAM (Modified by ChatGPT)",
    description: "Generate unique random quiz question every time",
    commandCategory: "fun",
    usages: "/quiz",
    cooldowns: 3
};

let activeQuizzes = {};        
let usedQuestions = {};       

// Dynamic question bank
const questionBank = [
    { q: "ржмрж╛ржВрж▓рж╛ржжрзЗрж╢рзЗрж░ рж╕рзНржмрж╛ржзрзАржирждрж╛ ржХрзЛржи рж╕рж╛рж▓рзЗ ржЕрж░рзНржЬрж┐ржд рж╣ржпрж╝?", opts: ["рззрзпрзнрзз", "рззрзпрзмрзл", "рззрзпрзлрзи", "рззрзпрзкрзн"], a: 1 },
    { q: "ржмрж┐рж╢рзНржмрзЗрж░ рж╕ржмржЪрзЗржпрж╝рзЗ ржмржбрж╝ ржжрзЗрж╢ ржХрзЛржиржЯрж┐?", opts: ["рж░рж╛рж╢рж┐ржпрж╝рж╛", "ржЪрзАржи", "ржХрж╛ржирж╛ржбрж╛", "ржЖржорзЗрж░рж┐ржХрж╛"], a: 1 },
    { q: "ржкрзГржерж┐ржмрзАрж░ ржирж┐ржХржЯрждржо ржЧрзНрж░рж╣ ржХрзЛржиржЯрж┐?", opts: ["ржоржЩрзНржЧрж▓", "рж╢рзБржХрзНрж░", "ржмрзГрж╣рж╕рзНржкрждрж┐", "рж╢ржирж┐"], a: 2 },
    { q: "Who is known as the Father of Computer?", opts: ["Charles Babbage", "Alan Turing", "Bill Gates", "Steve Jobs"], a: 1 },
    { q: "ржмрж╛ржВрж▓рж╛ржжрзЗрж╢рзЗрж░ ржЬрж╛рждрзАржпрж╝ ржкрж╢рзБ ржХрзЛржиржЯрж┐?", opts: ["ржмрж╛ржШ", "рж╣рж╛рждрж┐", "рж░рж╛ржЬрж╣рж╛ржБрж╕", "ржоржпрж╝рзВрж░"], a: 1 },
    { q: "2 + 2 ├Ч 2 = ?", opts: ["6", "8", "4", "10"], a: 1 },
    { q: "Which gas do plants absorb?", opts: ["Oxygen", "Carbon Dioxide", "Nitrogen", "Hydrogen"], a: 2 },
    { q: "ржкржжрзНржорж╛ рж╕рзЗрждрзБрж░ ржжрзИрж░рзНржШрзНржп ржХржд?", opts: ["6.15 ржХрж┐ржорж┐", "5 ржХрж┐ржорж┐", "7.5 ржХрж┐ржорж┐", "10 ржХрж┐ржорж┐"], a: 1 }
];

module.exports.run = async function ({ api, event }) {
    const { threadID } = event;

    if (!usedQuestions[threadID]) usedQuestions[threadID] = [];

    // Filter out unused questions
    const unused = questionBank.filter((_, i) => !usedQuestions[threadID].includes(i));

    if (unused.length === 0) {
        return api.sendMessage("тЬЕ рж╕ржм ржкрзНрж░рж╢рзНржи рж╢рзЗрж╖ рж╣рзЯрзЗ ржЧрзЗржЫрзЗ! (Reset рж╣ржЪрзНржЫрзЗ)", threadID, () => {
            usedQuestions[threadID] = []; // reset ржХрж░рзЗ ржЖржмрж╛рж░ ржирждрзБржи рж╢рзБрж░рзБ
        });
    }

    // Pick random question
    const randomIndex = Math.floor(Math.random() * unused.length);
    const questionIndex = questionBank.indexOf(unused[randomIndex]);
    const quiz = questionBank[questionIndex];

    // Save for validation
    usedQuestions[threadID].push(questionIndex);
    activeQuizzes[threadID] = quiz;

    // Format message
    let optsText = "";
    quiz.opts.forEach((o, i) => {
        optsText += `тЮбя╕П ${i + 1}. ${o}\n`;
    });

    const msg = `ЁЯМЯтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБЁЯМЯ
ЁЯУЭ ЁЭРРЁЭРоЁЭРвЁЭР│ ЁЭРУЁЭРвЁЭРжЁЭРЮ!
ЁЯМЯтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБЁЯМЯ

тЭУ ${quiz.q}

${optsText}
тЪб ржЙрждрзНрждрж░ ржжрж┐рждрзЗ рж╢рзБржзрзБ рзз, рзи, рзй, рзк рж░рж┐ржкрзНрж▓рж╛ржЗ ржХрж░рзБржиред`;

    return api.sendMessage(msg, threadID);
};

module.exports.handleEvent = async function ({ event, api }) {
    const { threadID, body, senderID } = event;

    if (!activeQuizzes[threadID]) return;

    const quiz = activeQuizzes[threadID];
    const ans = parseInt(body);

    if (!ans || ans < 1 || ans > 4) return;

    if (ans === quiz.a) {
        api.sendMessage(
            `тЬЕ рж╕ржарж┐ржХ ржЙрждрзНрждрж░! ЁЯОЙ\nрж╕рзНржмрж╛ржЧрждржо @${senderID}`,
            threadID,
            () => {},
            { mentions: [{ tag: "User", id: senderID }] }
        );
    } else {
        api.sendMessage(
            `тЭМ ржнрзБрж▓ ржЙрждрзНрждрж░!\nЁЯТб рж╕ржарж┐ржХ ржЙрждрзНрждрж░: ${quiz.a}. ${quiz.opts[quiz.a - 1]}`,
            threadID
        );
    }

    // Remove quiz after answered
    delete activeQuizzes[threadID];
};
